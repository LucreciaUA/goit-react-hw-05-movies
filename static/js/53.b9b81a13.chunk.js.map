{"version":3,"file":"static/js/53.b9b81a13.chunk.js","mappings":"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","sources":["API/cast.js","webpack://react-homework-template/./src/components/cast/cast.module.css?44e2","components/cast/cast.jsx","webpack://react-homework-template/./src/components/spinner/loader.module.css?8b21","components/spinner/loader.jsx","API/api.js"],"sourcesContent":["import { api } from \"./api.js\"\nconst apiKey = `579f9cde8301da77a7eae5840c1b4661`\n\nexport const getCast = async(movieId) => {\n    const response = await api.get(`movie/${movieId}/credits?api_key=${apiKey}&language=en-US'`)\n    console.log(response.data)\n    return response.data\n}","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"cast_card__lmEDn\",\"wrap\":\"cast_wrap__DY0y4\"};","import { getCast } from \"API/cast.js\"\nimport React, { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\";\nimport css from './cast.module.css'\nimport { Loader } from \"components/spinner/loader.jsx\";\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([])\n    const [isLoading, setIsLoading] = useState(false)\n    \n    useEffect(() => {\n\n        const getMovieCast = async () => {\n            \n            try {\n                setIsLoading(true)\n                const res = await getCast(movieId)\n                console.log(res.cast)\n                setCast(res.cast)\n                setIsLoading(false)\n            }\n            catch (error) {\n                console.log(error)\n            }\n            \n        }\n\n        getMovieCast()\n    },[movieId])\n    return (\n        <>{\n            isLoading?(<Loader/>):\n        (<>\n            <div className={css.wrap}>\n            {cast.length === 0 ?(\n                <p>There is no data</p>\n            ): (\n                cast.map((el) => (\n                    <div className={css.card} key={el.id}>\n                        {\n                            <img\n                            src={`https://image.tmdb.org/t/p/w200${el.profile_path}`}\n                            alt={el.name}\n                            />\n                        \n                        }\n                        <div className={css.character}>\n                        <h4 className={css.text}>{el.name}</h4>\n                        <p className={css.text}>\n                            <b>Character:</b>  {el.character}\n                        </p></div>\n                        \n                    </div>\n                ))\n            )  }\n        </div>\n            \n            </>)}\n            </>\n         \n    )\n}\n\nexport default Cast","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"loader_wrapper__LrcHi\"};","import { Vortex } from \"react-loader-spinner\";\nimport css from './loader.module.css'\n\nexport const Loader = () => {\n    return (\n        <div className={css.wrapper}>\n        <Vortex\n                    visible={true}\n                    height=\"80\"\n                    width=\"80\"\n                    ariaLabel=\"vortex-loading\"\n                    wrapperStyle={{}}\n                    wrapperClass=\"vortex-wrapper\"\n                    colors={['blue', 'blue', 'blue','yellow', 'yellow', 'yellow']}\n            />\n            </div>\n    )\n}","import axios from \"axios\"\n\n\nexport const api = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/'\n})"],"names":["getCast","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","movieId","response","_context","prev","next","api","concat","sent","console","log","data","abrupt","stop","_x","apply","arguments","useParams","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","_useState4","isLoading","setIsLoading","useEffect","getMovieCast","res","t0","_jsx","_Fragment","children","Loader","className","css","length","map","el","_jsxs","src","profile_path","alt","name","character","id","Vortex","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","axios","baseURL"],"sourceRoot":""}